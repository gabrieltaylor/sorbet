class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C X><<C <todo sym>>> < (::<todo sym>)
      <emptyTree>
    end

    if ::<Magic>.defined?(<emptyTree>::<C X>)
      <emptyTree>::<C X>
    else
      <emptyTree>::<C X> = <emptyTree>::<C Class>.new()
    end

    <emptyTree>::<C T>.reveal_type(<emptyTree>::<C X>)
  end

  class <emptyTree>::<C B><<C <todo sym>>> < (::<todo sym>)
    <emptyTree>::<C X> = <emptyTree>::<C T>.let(nil, <emptyTree>::<C Integer>)

    if ::<Magic>.defined?(<emptyTree>::<C X>)
      <emptyTree>::<C X>
    else
      <emptyTree>::<C X> = 0
    end

    <emptyTree>::<C T>.reveal_type(<emptyTree>::<C X>)
  end

  class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
    <emptyTree>::<C X> = <emptyTree>::<C T>.let(nil, <emptyTree>::<C T>.nilable(<emptyTree>::<C String>))

    if ::<Magic>.defined?(<emptyTree>::<C X>)
      <emptyTree>::<C X>
    else
      <emptyTree>::<C X> = 0
    end

    <emptyTree>::<C T>.reveal_type(<emptyTree>::<C X>)
  end
end
